name: ComputeHive CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_PREFIX: ${{ github.repository_owner }}/computehive

jobs:
  # Code Quality Checks
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [agent, core-services, web, contracts, sdk]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        if: matrix.component == 'agent' || matrix.component == 'core-services'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Set up Node.js
        if: matrix.component == 'web' || matrix.component == 'contracts' || matrix.component == 'sdk'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Lint Go Code
        if: matrix.component == 'agent' || matrix.component == 'core-services'
        run: |
          cd ${{ matrix.component }}
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run --timeout=10m
          
      - name: Lint JavaScript/TypeScript
        if: matrix.component == 'web' || matrix.component == 'sdk'
        run: |
          cd ${{ matrix.component }}
          npm ci
          npm run lint
          
      - name: Lint Solidity
        if: matrix.component == 'contracts'
        run: |
          cd contracts
          npm ci
          npm run lint

  # Unit Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        component: [agent, core-services, web, contracts, sdk]
    services:
      postgres:
        image: cockroachdb/cockroach:latest-v23.1
        ports:
          - 26257:26257
        options: >-
          --health-cmd "curl -f http://localhost:8080/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        if: matrix.component == 'agent' || matrix.component == 'core-services'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Set up Node.js
        if: matrix.component == 'web' || matrix.component == 'contracts' || matrix.component == 'sdk'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Run Go Tests
        if: matrix.component == 'agent' || matrix.component == 'core-services'
        run: |
          cd ${{ matrix.component }}
          go mod download
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          
      - name: Run JavaScript/TypeScript Tests
        if: matrix.component == 'web' || matrix.component == 'sdk'
        run: |
          cd ${{ matrix.component }}
          npm ci
          npm run test:coverage
          
      - name: Run Solidity Tests
        if: matrix.component == 'contracts'
        run: |
          cd contracts
          npm ci
          npm run test:coverage
          
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.component }}/coverage.out
          flags: ${{ matrix.component }}
          fail_ci_if_error: true

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Snyk Security Scan
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/golang
            p/javascript
            p/typescript
            p/smart-contracts

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [agent, auth-service, scheduler-service, marketplace-service, payment-service, telemetry-service]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.service }}.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: computehive-test
          
      - name: Install Istio
        run: |
          curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.19.0 sh -
          ./istio-1.19.0/bin/istioctl install --set profile=demo -y
          
      - name: Deploy test environment
        run: |
          kubectl create namespace computehive-test
          kubectl label namespace computehive-test istio-injection=enabled
          helm install computehive ./infrastructure/helm/computehive \
            --namespace computehive-test \
            --values ./infrastructure/helm/computehive/values-test.yaml \
            --wait
            
      - name: Run integration tests
        run: |
          cd tests/integration
          npm ci
          npm run test
          
      - name: Collect logs on failure
        if: failure()
        run: |
          kubectl logs -n computehive-test -l app=auth-service --tail=100
          kubectl logs -n computehive-test -l app=scheduler-service --tail=100
          kubectl describe pods -n computehive-test

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.computehive.io
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name computehive-staging --region us-east-1
          
      - name: Deploy with Helm
        run: |
          helm upgrade --install computehive ./infrastructure/helm/computehive \
            --namespace computehive \
            --values ./infrastructure/helm/computehive/values-staging.yaml \
            --set-string global.image.tag=${{ github.sha }} \
            --wait \
            --timeout 10m
            
      - name: Run smoke tests
        run: |
          cd tests/smoke
          npm ci
          ENVIRONMENT=staging npm run test

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://computehive.io
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name computehive-prod --region us-east-1
          
      - name: Deploy with Helm (Canary)
        run: |
          helm upgrade --install computehive-canary ./infrastructure/helm/computehive \
            --namespace computehive \
            --values ./infrastructure/helm/computehive/values-production.yaml \
            --values ./infrastructure/helm/computehive/values-canary.yaml \
            --set-string global.image.tag=${{ github.sha }} \
            --wait \
            --timeout 10m
            
      - name: Run canary tests
        run: |
          cd tests/canary
          npm ci
          ENVIRONMENT=production npm run test
          
      - name: Promote to full production
        if: success()
        run: |
          helm upgrade --install computehive ./infrastructure/helm/computehive \
            --namespace computehive \
            --values ./infrastructure/helm/computehive/values-production.yaml \
            --set-string global.image.tag=${{ github.sha }} \
            --wait \
            --timeout 15m
            
      - name: Rollback on failure
        if: failure()
        run: |
          helm rollback computehive -n computehive

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run k6 performance tests
        uses: grafana/k6-action@v0.3.0
        with:
          filename: tests/performance/load-test.js
          cloud: true
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          K6_CLOUD_PROJECT_ID: ${{ secrets.K6_CLOUD_PROJECT_ID }}
          
      - name: Check performance thresholds
        run: |
          # Check if performance meets SLA requirements
          # This would typically parse k6 results and compare against thresholds 